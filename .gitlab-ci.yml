services:
  - docker:dind

variables:
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
  GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  DOCKER_HOST: tcp://localhost:2375

stages:
  - test
  - install

sonarcloud-check:
  stage: test
  tags:
    - ops
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner

unit-test:
  stage: test
  tags:
    - ops
  image:
    name: node:12.18.4
    entrypoint: [""]
  cache:
    key: "${CI_JOB_NAME}"
  script:
    - npm install -g @angular/cli@10.1.3
    - npm install
    - echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list
    - wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -
    - apt-get update && apt-get -y install google-chrome-stable
    - ng test
  allow_failure: true

e2e-test:
  stage: test
  tags:
    - ops
  image:
    name: node:12.18.4
    entrypoint: [""]
  cache:
    key: "${CI_JOB_NAME}"
  script:
    - npm install -g @angular/cli@10.1.3
    - npm install
    - echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list
    - wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -
    - apt-get update && apt-get -y install google-chrome-stable
    - ng e2e
  allow_failure: true

deploy_development:
  image: docker:dind
  stage: install
  environment: Development
  services:
  - docker:dind
  variables:
    DOCKER_DRIVER: overlay
    DOCKER_HOST: tcp://localhost:2375
    DOCKER_TLS_CERTDIR: ''
  tags:
    - ops
  script:
    - apk add --no-cache python3 py-pip
    - pip install awscli
    - aws --version
    - aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${AWS_ACCOUNT}
    - docker build -t ${AWS_ACCOUNT}/${ECR_REPO}:dev-${CI_COMMIT_SHORT_SHA} -f Dockerfile-nginx .
    - docker push ${AWS_ACCOUNT}/${ECR_REPO}:dev-${CI_COMMIT_SHORT_SHA}
  only:
    - develop

deploy_staging:
  image: docker:dind # ${AWS_ACCOUNT}/node-slave:latest
  stage: install
  environment: Staging
  services:
  - docker:dind
  variables:
    DOCKER_DRIVER: overlay
    DOCKER_HOST: tcp://localhost:2375
    DOCKER_TLS_CERTDIR: ''
  tags:
    - ops
  script:
    - apk add --no-cache python3 py-pip
    - pip install awscli
    - aws --version
    - aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${AWS_ACCOUNT}
    - docker build -t ${AWS_ACCOUNT}/${ECR_REPO}:stg-${CI_COMMIT_SHORT_SHA} -f Dockerfile-nginx .
    - docker push ${AWS_ACCOUNT}/${ECR_REPO}:stg-${CI_COMMIT_SHORT_SHA}
  only:
    - /release\/*/

dockerize_production:
  image: docker:dind
  stage: install
  environment: Production
  services:
  - docker:dind
  variables:
    DOCKER_DRIVER: overlay
    DOCKER_HOST: tcp://localhost:2375
    DOCKER_TLS_CERTDIR: ''
  tags:
    - ops
  script:
    - apk add --no-cache python3 py-pip
    - pip install awscli
    - aws --version
    - aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${AWS_ACCOUNT}
    - docker build -t ${AWS_ACCOUNT}/${ECR_REPO}:${CI_COMMIT_REF_NAME} -f Dockerfile-nginx .
    - docker push ${AWS_ACCOUNT}/${ECR_REPO}:${CI_COMMIT_REF_NAME}
  only:
    - tags

